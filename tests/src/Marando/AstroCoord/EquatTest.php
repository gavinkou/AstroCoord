<?php

namespace Marando\AstroCoord;

use \Marando\AstroDate\AstroDate;
use \Marando\Units\Angle;
use \Marando\Units\Distance;
use \Marando\Units\Pressure;
use \Marando\Units\Temperature;
use \Marando\Units\Time;
use \PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-05 at 00:10:16.
 */
class EquatTest extends PHPUnit_Framework_TestCase {

  /**
   * @covers Marando\AstroCoord\Equat::apparent
   */
  public function testApparent() {
    $epoch = AstroDate::parse('2015-Mar-20 00:00:00.000')->toEpoch();
    $ra    = Time::hms(22, 51, 15.99);
    $dec   = Angle::dms(-9, 45, 03.3);

    $astrom = new Equat(Frame::ICRF(), $epoch, $ra, $dec, Distance::m(0));

    $geo      = Geo::deg(27, -82);
    $pressure = Pressure::inHg(30);
    $temp     = Temperature::F(75);
    $humidity = 0.7;
    $app      = $astrom->apparent($geo, $pressure, $temp, $humidity);

    // TODO: Figure out why this inst exact
    $this->assertEquals(343.60341, $app->ra->toAngle()->deg, 'ra', 1);
    $this->assertEquals(-9.39349, $app->dec->deg, 'dec', 0.25);
  }

  /**
   * @covers Marando\AstroCoord\Equat::toHoriz
   */
  public function testToHoriz() {
    $epoch  = AstroDate::parse('2015-Mar-20 00:00:00.000')->toEpoch();
    $ra     = Time::hms(22, 51, 15.99);
    $dec    = Angle::dms(-9, 45, 03.3);
    $geo    = Geo::deg(27, -82);
    $astrom = new Equat(Frame::ICRF(), $epoch, $ra, $dec, Distance::m(0));
    $horiz  = $astrom->toHoriz($geo);

    // TODO: Figure out why this inst exact
    $this->assertEquals(-23.4393, $horiz->alt->deg, 'alt', 1);
    $this->assertEquals(271.2178, $horiz->az->deg, 'az', 0.25);
  }

}
