<?php

namespace Marando\AstroCoord;

use \Marando\AstroDate\AstroDate;
use \Marando\Units\Angle;
use \Marando\Units\Distance;
use \Marando\Units\Pressure;
use \Marando\Units\Temperature;
use \Marando\Units\Time;
use \PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-05 at 00:10:16.
 */
class EquatTest extends PHPUnit_Framework_TestCase {

  /**
   * @covers Marando\AstroCoord\Equat::apparent
   */
  public function testApparent() {
    return;
    /**
     * Geocentric Apparent Place. Test values from JPL Horizons system, position
     * of Jupiter on JD 2457335.472615741 TT
     */
    $frame  = Frame::ICRF();
    $epoch  = AstroDate::jd(2457335.472615741)->toEpoch();
    $ra     = Time::hms(11, 16, 46.60);
    $dec    = Angle::dms(5, 45, 32.5);
    $dist   = Distance::au(5.8);
    $aGeo   = (new Equat($frame, $epoch, $ra, $dec, $dist))->apparent();
    $expRA  = Time::hms(11, 17, 34.89);
    $expDec = Angle::dms(5, 40, 23.3);
    $this->assertEquals($expRA, $aGeo->ra, 'geocentric apparent, ra', 1e-3);
    $this->assertEquals($expDec, $aGeo->dec, 'geocentric apparent, dec', 1e-3);


    return;


    //
    $epoch = AstroDate::parse('2015-Mar-20 00:00:00.000')->toEpoch();
    $ra    = Time::hms(22, 51, 15.99);
    $dec   = Angle::dms(-9, 45, 03.3);
    $geo   = Geo::deg(27, -82);

    $astrom        = new Equat(Frame::ICRF(), $epoch, $ra, $dec, Distance::m(0));
    $astrom->obsrv = $geo;

    $pressure = Pressure::inHg(30);
    $temp     = Temperature::F(75);
    $humidity = 0.7;
    $app      = $astrom->apparent($pressure, $temp, $humidity);

    // TODO: Figure out why this inst exact
    $this->assertEquals(343.60341, $app->ra->toAngle()->deg, 'ra', 1);
    $this->assertEquals(-9.39349, $app->dec->deg, 'dec', 0.25);
  }

  /**
   * @covers Marando\AstroCoord\Equat::toHoriz
   */
  public function testToHoriz() {
    $epoch = AstroDate::parse('2015-Mar-20 00:00:00.000')->toEpoch();
    $ra    = Time::hms(22, 51, 15.99);
    $dec   = Angle::dms(-9, 45, 03.3);
    $geo   = Geo::deg(27, -82);

    $astr        = new Equat(Frame::ICRF(), $epoch, $ra, $dec, Distance::m(0));
    $astr->obsrv = $geo;

    $horiz = $astr->toHoriz();

    // TODO: Figure out why this inst exact
    $this->assertEquals(-23.4393, $horiz->alt->deg, 'alt', 1);
    $this->assertEquals(271.2178, $horiz->az->deg, 'az', 0.5);
  }

  public function testToEclip() {
    $epoch = AstroDate::parse('2015-Nov-08 23:11:17')->toEpoch();
    $ra    = Angle::deg(180.77235)->toTime();
    $dec   = Angle::deg(0.91677);



    echo "\n\n" . $eq = new Equat(Frame::ICRF(), $epoch, $ra, $dec);
    echo "\n" . $eq->toEclip();

    echo "\n\n" . $eq = new Equat(Frame::ICRF(), $epoch, $ra, $dec);
    echo "\n" . $eq->apparent()->toEclip();

    echo "\n\n" . $eq        = new Equat(Frame::ICRF(), $epoch, $ra, $dec);
    $eq->obsrv = Geo::deg(27, -82);
    echo "\n" . $eq->apparent()->toEclip();
  }

}
