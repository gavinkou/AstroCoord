<?php

namespace Marando\AstroCoord;

use \Marando\Units\Distance;
use \Marando\Units\Velocity;
use \Marando\AstroDate\Epoch;
use \Marando\AstroCoord\Frame;
use \Marando\AstroDate\AstroDate;
use \Marando\JPLephem\DE\Reader;
use \Marando\JPLephem\DE\SSObj;
use \Marando\Units\Time;
use \Marando\Units\Angle;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-03 at 01:14:00.
 */
class GenericTest extends \PHPUnit_Framework_TestCase {

  public function test() {

     echo "\n\n" . Geo::deg(27.4543, -82.5432);


    echo "\n\n" . new Horiz(Angle::deg(43.432423), Angle::deg(45.255),
    Distance::au(10));


    $ra   = Time::hms(22, 52, 2.68);
    $dec  = Angle::dms(-9, 40, 15.3);
    $dist = Distance::au(0.7);
    $e    = new Equat($ra, $dec, $dist);

    echo "\n\n" . $e;

    return;








    echo "\n";

    $ra   = Time::hms(22, 52, 2.68);
    $dec  = Angle::dms(-9, 40, 15.3);
    $dist = Distance::au(0.7);
    $e    = new Equat($ra, $dec, $dist);

    echo $geo = Geo::deg(27, -82);
    $st  = AstroDate::parse('2015-Mar-20 00:00:00')->gast($geo->lon->norm());
    echo "\n\n" . $st;
    echo "\n" . $e;
    echo "\n" . $e->toHoriz($st, $geo->lat);

    return;


    //$st  = AstroDate::parse('2015-Mar-20 00:00:00')->gast($geo->lon);

    for ($i = 0; $i < 5; $i++) {
      $ra   = Time::sec(rand(0, 86400) + rand(0, 100) / rand(1, 100));
      $dec  = Angle::dms(rand(-90, 90), rand(0, 60), rand(0, 60));
      $dist = Distance::au(0.7);
      $e    = new Equat($ra, $dec, $dist);

      $geo = Geo::deg(rand(-90, 90), rand(0, 360));
      $st  = Time::hours(rand(0, 24));
      //echo "\n" . $e;
      echo "\n" . new Horiz(Angle::deg(10), Angle::deg(45));
      //echo "\n" . $e->toHoriz($st, $geo->lat);
    }


    echo "\n";
    return;

    // Position & velocity  of Mercury
    $x  = Distance::au(+1.180526793264470E+00);
    $y  = Distance::au(-3.650485652522116E-01);
    $z  = Distance::au(-2.123422968928603E-01);
    $vx = Velocity::aud(2.052320553396918E-02);
    $vy = Velocity::aud(2.828864020900079E-02);
    $vz = Velocity::aud(1.145246106968459E-02);

    $c = new Cartesian($x, $y, $z, $vx, $vy, $vz);
    echo "\n$c\n";



    $eq = $c->toEquat();
    $eq->topo(new Geo(-27, 30));





    echo "\n\n" . $c->toEquat();

    echo "\n\n" . $c->toEquat()->toHoriz(AstroDate::now(), Geo::deg(27, -82));



    return;
    // Position & velocity  of Mercury
    $x  = Distance::au(+1.180526793264470E+00);
    $y  = Distance::au(-3.650485652522116E-01);
    $z  = Distance::au(-2.123422968928603E-01);
    $vx = Velocity::aud(2.052320553396918E-02);
    $vy = Velocity::aud(2.828864020900079E-02);
    $vz = Velocity::aud(1.145246106968459E-02);

    $c = new Cartesian($x, $y, $z, $vx, $vy, $vz);
    echo "\n$c\n";


    echo "\n\n" . $c = new Cartesian($x, $y, $z);
    echo "\n\n" . $c->toEquat();
    $c = new Cartesian($x, $y, $z);
    echo "\n\n" . $c->toEquat()->toCartesian();

    $c = new Cartesian($x, $y, $z);
    echo "\n\n" . $c->toEquat()->toHoriz(AstroDate::now());







    return;

    // Position of Mercury
    $x = Distance::au(+1.180526793264470E+00);
    $y = Distance::au(-3.650485652522116E-01);
    $z = Distance::au(-2.123422968928603E-01);

    // Velocity of Mercury
    $vx = Velocity::aud(2.052320553396918E-02);
    $vy = Velocity::aud(2.828864020900079E-02);
    $vz = Velocity::aud(1.145246106968459E-02);

    // Frame & epoch
    $frame = Frame::ICRF();
    $epoch = AstroDate::parse('2015-Mar-20')->toEpoch();

    $c = new Cartesian($frame, $epoch, $x, $y, $z, $vx, $vy, $vz);

    echo "\n\n";

    echo $c;
    echo "\n\n";
    echo $c->setUnit('km km/d');
    echo "\n\n";
    echo $c->setUnit('km km/s');
    echo "\n\n";

    echo $c->toEquat();
    echo "\n\n";

    echo $c->toEquat()->apparent();
    echo "\n\n";


    echo $c->toEquat()->apparent(Geo::deg(27, 278));
    echo "\n\n";


    echo $c->toEquat()->toHoriz(Geo::deg(27, 278));
    echo "\n\n";
  }

}
