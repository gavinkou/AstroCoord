<?php

namespace Marando\AstroCoord;

use \Marando\Units\Distance;
use \Marando\Units\Velocity;
use \Marando\AstroDate\Epoch;
use \Marando\AstroCoord\Frame;
use \Marando\AstroDate\AstroDate;
use \Marando\JPLephem\DE\Reader;
use \Marando\JPLephem\DE\SSObj;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-03 at 01:14:00.
 */
class CartesianTest extends \PHPUnit_Framework_TestCase {

  public function test() {



    // Position of Mercury
    $x = Distance::au(+1.180526793264470E+00);
    $y = Distance::au(-3.650485652522116E-01);
    $z = Distance::au(-2.123422968928603E-01);

    // Velocity of Mercury
    $vx = Velocity::aud(2.052320553396918E-02);
    $vy = Velocity::aud(2.828864020900079E-02);
    $vz = Velocity::aud(1.145246106968459E-02);

    // Frame & epoch
    $frame = Frame::ICRF();
    $epoch = AstroDate::parse('2015-Mar-20')->toEpoch();

    $c = new Cartesian($frame, $epoch, $x, $y, $z, $vx, $vy, $vz);

    echo "\n\n";

    echo $c;
    echo "\n\n";
    echo $c->setUnit('km km/d');
    echo "\n\n";
     echo $c->setUnit('km km/s');
    echo "\n\n";

    echo $c->toEquat();
    echo "\n\n";

    echo $c->toEquat()->apparent();
    echo "\n\n";


    echo $c->toEquat()->apparent(Geo::deg(27, 278));
    echo "\n\n";


    echo $c->toEquat()->toHoriz(Geo::deg(27, 278));
    echo "\n\n";
  }

}
