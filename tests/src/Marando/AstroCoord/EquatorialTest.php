<?php

namespace Marando\AstroCoord;

use \Marando\Units\Time;
use \Marando\Units\Angle;
use \Marando\AstroDate\AstroDate;
use \Marando\Units\Distance;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-22 at 15:53:16.
 */
class EquatorialTest extends \PHPUnit_Framework_TestCase {

  /**
   * @covers Marando\AstroCoord\Equatorial::create
   * @todo   Implement testCreate().
   */
  public function testCreate() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::ecliptic
   * @todo   Implement testEcliptic().
   */
  public function testEcliptic() {
    $ecl  = Ecliptic::dmsdms(113, 12, 56.266, 6, 41, 3.011);
    $eq   = Equatorial::deg(116.328942, 28.026183);
    $date = AstroDate::jd(2451544.5);
    $ε    = Angle::deg(23.4392911);

    $this->assertEquals($eq, Equatorial::ecliptic($ecl, $date, $ε), null, 1e-4);
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::horizontal
   */
  public function testHorizontal() {
    $date  = AstroDate::parse('1987-Apr-10 19:21:00');
    $usno  = Geographic::dmsdms(38, 55, 17, 77, 3, 56);
    $horiz = Horizontal::deg(15.124973794735, 68.033595987686);
    $eq    = Equatorial::hmsdms(23, 9, 16.641, -6, 43, 11.61);

    $this->assertEquals($eq, Equatorial::horizontal($horiz, $usno, $date));
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::galactic
   * @todo   Implement testGalactic().
   */
  public function testGalactic() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::angles
   * @todo   Implement testAngles().
   */
  public function testAngles() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::deg
   * @todo   Implement testDeg().
   */
  public function testDeg() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::rad
   * @todo   Implement testRad().
   */
  public function testRad() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::hmsdms
   * @todo   Implement testHmsdms().
   */
  public function testHmsdms() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::toEcliptic
   * @todo   Implement testToEcliptic().
   */
  public function testToEcliptic() {
    $eq   = Equatorial::deg(116.328942, 28.026183);
    $ecl  = Ecliptic::dmsdms(113, 12, 56.266, 6, 41, 3.011);
    $date = AstroDate::jd(2451544.5);
    $ε    = Angle::deg(23.4392911);

    $this->assertEquals($ecl, $eq->toEcliptic($date, $ε), null, 1e-6);
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::toHorizontal
   */
  public function testToHorizontal() {
    $date  = AstroDate::parse('1987-Apr-10 19:21:00');
    $usno  = Geographic::dmsdms(38, 55, 17, 77, 3, 56);
    $eq    = Equatorial::hmsdms(23, 9, 16.641, -6, 43, 11.61);
    $horiz = Horizontal::deg(15.1249, 68.033693278);

    $this->assertEquals($horiz, $eq->toHorizontal($usno, $date), null, 1e-4);
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::toGalactic
   * @todo   Implement testToGalactic().
   */
  public function testToGalactic() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::celestPoleDist
   * @todo   Implement testCelestPoleDist().
   */
  public function testCelestPoleDist() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::explodeRad
   * @todo   Implement testExplodeRad().
   */
  public function testExplodeRad() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::explodeDeg
   * @todo   Implement testExplodeDeg().
   */
  public function testExplodeDeg() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::topo()
   */
  public function testGeneric() {

    return;





    return;
    $date = new AstroDate(2003, 8, 28, 3, 16, 59.733);

    $palomar = Geographic::dmsdms(33, 21, 22, -116, 51, 45)
            ->height(Distance::m(1706));


    $mars = Equatorial::hmsdms(22, 38, 7.25, -15, 46, 15.9)
            ->dist(Distance::au(0.37276));

    echo "\n" . $mars;
    echo "\n" . $altaz = $mars->toHorizontal($palomar, $date);
    echo "\n" . $altaz->toEquatorial($palomar, $date);

    return;
    /*
      for ($i = 0; $i < 50; $i+=365.25) {
      echo "\n";
      $n = \Marando\Meeus\Nutation\Nutation::find(AstroDate::now());
      echo "\t{$n->long}";
      echo "\t{$n->obli}";
      }


      return;
     *
     */

    $date = new AstroDate(2003, 8, 28, 3, 16, 59.733);

    $palomar = Geographic::dmsdms(33, 21, 22, -116, 51, 45)
            ->height(Distance::m(1706));

    $mars = Equatorial::hmsdms(22, 38, 7.25, -15, 46, 15.9)
            ->dist(Distance::au(0.37276));



    echo "\ngeocentr = " . $mars->topo($palomar, $date);
    echo "\n    topo = " . $mars->geocentr($palomar, $date);

    //echo "\n\n" . $mars->toHorizontal($date, $palomar)->topo($palomar, $date);
    //echo "\n" . $mars->toHorizontal($date, $palomar)->geocentr($palomar, $date);


    return;
    $geo = Geographic::create(
                    Angle::dms(33, 21, 22), Angle::dms(-116, 51, 45),
                    Distance::m(1706));

    /**
     * Date is originally 2003-Aug-28 03:17:00, but to adjust for differneces in
     * sidereal time based on the USNO and Meeus method this time is used to
     * have the same sidereal time for test purposes
     */
    $date = new AstroDate(2003, 8, 28, 3, 16, 59.733);

    //$eq = Equatorial::hmsdms(22, 38, 7.25, -15, 46, 15.9);
    $eq       = Equatorial::hmsdms(22, 38, 7.25, -15, 46, 15.9);
    $eq->dist = Distance::au(0.37276);

    echo "\n" . $eq;
    echo "\n" . $eq->topo($geo, $date);
    echo "\n" . $eq->geocentr();

    $geo = Geographic::deg(5, 20)->height(Distance::m(1706));
    $eq  = Equatorial::deg(34, 213)->dist(Distance::au(1.6));


    return;
    echo "\n" . $eq;
    echo "\n" . $eq->topo($geo, $date);
    echo "\n" . $eq->topo($geo, $date);
    echo "\n" . $eq->geocentr($geo, $date);
  }

}
