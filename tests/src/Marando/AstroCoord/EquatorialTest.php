<?php

namespace Marando\AstroCoord;

use \Marando\Units\Time;
use \Marando\Units\Angle;
use \Marando\AstroDate\AstroDate;
use \Marando\Units\Distance;
use \Marando\AstroCoord\Geographic as Geo;
use \Marando\AstroCoord\Equatorial as EQ;
use \Marando\AstroCoord\Equatorial;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-22 at 15:53:16.
 */
class EquatorialTest extends \PHPUnit_Framework_TestCase {

  /**
   * @covers Marando\AstroCoord\Equatorial::create
   */
  public function testCreate() {
    $ra  = Time::hours(13.564323);
    $dec = Angle::deg(52.23432);
    $eq  = Equatorial::create($ra, $dec);

    $this->assertEquals($ra, $eq->ra);
    $this->assertEquals($dec, $eq->dec);
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::ecliptic
   */
  public function testEcliptic() {
    $ecl  = Ecliptic::dmsdms(113, 12, 56.266, 6, 41, 3.011);
    $eq   = Equatorial::deg(116.328942, 28.026183);
    $date = AstroDate::jd(2451544.5);
    $ε    = Angle::deg(23.4392911);

    $this->assertEquals($eq, Equatorial::ecliptic($ecl, $date, $ε), null, 1e-4);
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::horizontal
   */
  public function testHorizontal() {
    $date  = AstroDate::parse('1987-Apr-10 19:21:00');
    $usno  = Geographic::dmsdms(38, 55, 17, 77, 3, 56);
    $horiz = Horizontal::deg(15.124973794735, 68.033595987686);
    $eq    = Equatorial::hmsdms(23, 9, 16.641, -6, 43, 11.61);

    $this->assertEquals($eq, Equatorial::horizontal($horiz, $usno, $date));
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::galactic
   * @todo   Implement testGalactic().
   */
  public function testGalactic() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::angles
   */
  public function testAngles() {
    $ra  = Angle::deg(180);
    $dec = Angle::deg(90);
    $eq  = Equatorial::angles($ra, $dec);

    $this->assertEquals(12, $eq->ra->hours);
    $this->assertEquals(90, $eq->dec->deg);
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::deg
   */
  public function testDeg() {
    $eq = Equatorial::deg(180, 90);
    $this->assertEquals(12, $eq->ra->hours);
    $this->assertEquals(90, $eq->dec->deg);
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::rad
   */
  public function testRad() {
    $eq = Equatorial::rad(deg2rad(180), deg2rad(90));
    $this->assertEquals(12, $eq->ra->hours);
    $this->assertEquals(90, $eq->dec->deg);
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::hmsdms
   */
  public function testHmsdms() {
    $eq = Equatorial::hmsdms(4, 23, 19.123, 23, 90, 12.245);

    $this->assertEquals(4.3886452778, $eq->ra->hours, 'ra', 1e-3);
    $this->assertEquals(24.5034, $eq->dec->deg, 'dec', 1e-3);
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::toEcliptic
   */
  public function testToEcliptic() {
    $eq   = Equatorial::deg(116.328942, 28.026183);
    $ecl  = Ecliptic::dmsdms(113, 12, 56.266, 6, 41, 3.011);
    $date = AstroDate::jd(2451544.5);
    $ε    = Angle::deg(23.4392911);

    $this->assertEquals($ecl, $eq->toEcliptic($date, $ε), null, 1e-6);
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::toHorizontal
   */
  public function testToHorizontal() {
    $date  = AstroDate::parse('1987-Apr-10 19:21:00');
    $usno  = Geographic::dmsdms(38, 55, 17, 77, 3, 56);
    $eq    = Equatorial::hmsdms(23, 9, 16.641, -6, 43, 11.61);
    $horiz = Horizontal::deg(15.1249, 68.033693278);

    $this->assertEquals($horiz, $eq->toHorizontal($usno, $date), null, 1e-4);
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::toGalactic
   * @todo   Implement testToGalactic().
   */
  public function testToGalactic() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::celestPoleDist
   * @todo   Implement testCelestPoleDist().
   */
  public function testCelestPoleDist() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::explodeRad
   */
  public function testExplodeRad() {
    $eq = Equatorial::hmsdms(23, 9, 16.641, -6, 43, 11.61);
    $this->assertEquals(
            [$eq->ra->toAngle()->rad, $eq->dec->rad], $eq->explodeRad());
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::explodeDeg
   */
  public function testExplodeDeg() {
    $eq = Equatorial::hmsdms(23, 9, 16.641, -6, 43, 11.61);
    $this->assertEquals(
            [$eq->ra->toAngle()->deg, $eq->dec->deg], $eq->explodeDeg());
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::topo
   */
  public function testTopo() {
    $date    = AstroDate::parse('2003-Aug-28 03:17:00');
    $palomar = Geo::dmsdms(33, 21, 22, -116, 51, 45)->height(Distance::m(1704));
    $mars    = EQ::deg(339.530208, -15.771083)->dist(Distance::au(0.37376));
    $topo    = $mars->topo($palomar, $date);

    $this->assertEquals(22.6357055556, $topo->ra->hours, 'ra', 1e-6);
    $this->assertEquals(-15.775, $topo->dec->deg, 'dec', 1e-5);
  }

  /**
   * @covers Marando\AstroCoord\Equatorial::geocentr
   */
  public function testGeocentr() {
    $date     = AstroDate::parse('2003-Aug-28 03:17:00');
    $palomar  = Geo::dmsdms(33, 21, 22, -116, 51, 45)->height(Distance::m(1704));
    $marsTopo = EQ::create(Time::hours(22.6357055556), Angle::deg(-15.775))->dist(Distance::au(0.37376));
    $marsGeo  = $marsTopo->geocentr($palomar, $date);

    $this->assertEquals(339.530208 / 15, $marsGeo->ra->hours, 'ra', 1e-6);
    $this->assertEquals(-15.771083, $marsGeo->dec->deg, 'dec', 1e-5);
  }

}
